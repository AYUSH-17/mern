{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ayush.singh\\\\Desktop\\\\MERN\\\\prod-v2\\\\frontend\\\\src\\\\components\\\\Testimonial.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Menu } from './Home.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Testimonial = () => {\n  _s();\n\n  const [supportsBluetooth, setSupportsBluetooth] = useState(false);\n  const [isDisconnected, setIsDisconnected] = useState(true);\n  const [batteryLevel, setBatteryLevel] = useState(null); // When the component mounts, check that the browser supports Bluetooth\n\n  useEffect(() => {\n    if (navigator.bluetooth) {\n      setSupportsBluetooth(true);\n    }\n  }, []);\n  /**\r\n   * Let the user know when their device has been disconnected.\r\n   */\n\n  const onDisconnected = event => {\n    alert(`The device ${event.target} is disconnected`);\n    setIsDisconnected(true);\n  };\n  /**\r\n   * Update the value shown on the web page when a notification is\r\n   * received.\r\n   */\n\n\n  const handleCharacteristicValueChanged = event => {\n    setBatteryLevel(event.target.value.getUint8(0) + '%');\n  };\n  /**\r\n   * Attempts to connect to a Bluetooth device and subscribe to\r\n   * battery level readings using the battery service.\r\n   */\n\n\n  const connectToDeviceAndSubscribeToUpdates = async () => {\n    try {\n      // Search for Bluetooth devices that advertise a battery service\n      const device = await navigator.bluetooth.requestDevice({\n        filters: [{\n          services: ['battery_service']\n        }]\n      });\n      setIsDisconnected(false); // Add an event listener to detect when a device disconnects\n\n      device.addEventListener('gattserverdisconnected', onDisconnected); // Try to connect to the remote GATT Server running on the Bluetooth device\n\n      const server = await device.gatt.connect(); // Get the battery service from the Bluetooth device\n\n      const service = await server.getPrimaryService('battery_service'); // Get the battery level characteristic from the Bluetooth device\n\n      const characteristic = await service.getCharacteristic('battery_level'); // Subscribe to battery level notifications\n\n      characteristic.startNotifications(); // When the battery level changes, call a function\n\n      characteristic.addEventListener('characteristicvaluechanged', handleCharacteristicValueChanged); // Read the battery level value\n\n      const reading = await characteristic.readValue(); // Show the initial reading on the web page\n\n      setBatteryLevel(reading.getUint8(0) + '%');\n    } catch (error) {\n      console.log(`There was an error: ${error}`);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Menu, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Testimonial Page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Get Device Battery Info Over Bluetooth\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 9\n    }, this), supportsBluetooth && !isDisconnected && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Battery level: \", batteryLevel]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this), supportsBluetooth && isDisconnected && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: connectToDeviceAndSubscribeToUpdates,\n      children: \"Connect to a Bluetooth device\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }, this), !supportsBluetooth && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"This browser doesn't support the Web Bluetooth API\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"iframe\", {\n      width: \"420\",\n      height: \"315\",\n      src: \"https://www.youtube.com/embed/tgbNymZ7vqY?controls=0\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n      controls: true,\n      width: \"250\",\n      autoPlay: true,\n      children: [/*#__PURE__*/_jsxDEV(\"source\", {\n        src: \"https://www.youtube.com/watch?v=Dp6lbdoprZ0\",\n        type: \"video/webm\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"source\", {\n        src: \"https://www.youtube.com/watch?v=Dp6lbdoprZ0\",\n        type: \"video/mp4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 5\n      }, this), \"Sorry, your browser doesn't support embedded videos.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 7\n  }, this);\n};\n\n_s(Testimonial, \"eIOKgkxn9KXnbe8KpbzW3gBoKh0=\");\n\n_c = Testimonial;\nexport default Testimonial;\n\nvar _c;\n\n$RefreshReg$(_c, \"Testimonial\");","map":{"version":3,"sources":["C:/Users/ayush.singh/Desktop/MERN/prod-v2/frontend/src/components/Testimonial.js"],"names":["React","useState","Menu","Testimonial","supportsBluetooth","setSupportsBluetooth","isDisconnected","setIsDisconnected","batteryLevel","setBatteryLevel","useEffect","navigator","bluetooth","onDisconnected","event","alert","target","handleCharacteristicValueChanged","value","getUint8","connectToDeviceAndSubscribeToUpdates","device","requestDevice","filters","services","addEventListener","server","gatt","connect","service","getPrimaryService","characteristic","getCharacteristic","startNotifications","reading","readValue","error","console","log"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport { Menu } from './Home.js';\r\n\r\nconst Testimonial = () => {\r\n  const [supportsBluetooth, setSupportsBluetooth] = useState(false);\r\n  const [isDisconnected, setIsDisconnected] = useState(true);\r\n  const [batteryLevel, setBatteryLevel] = useState(null);\r\n\r\n  // When the component mounts, check that the browser supports Bluetooth\r\n  useEffect(() => {\r\n    if (navigator.bluetooth) {\r\n      setSupportsBluetooth(true);\r\n    }\r\n  }, []);\r\n\r\n  /**\r\n   * Let the user know when their device has been disconnected.\r\n   */\r\n  const onDisconnected = (event) => {\r\n    alert(`The device ${event.target} is disconnected`);\r\n    setIsDisconnected(true);\r\n  }\r\n\r\n  /**\r\n   * Update the value shown on the web page when a notification is\r\n   * received.\r\n   */\r\n  const handleCharacteristicValueChanged = (event) => {\r\n    setBatteryLevel(event.target.value.getUint8(0) + '%');\r\n  }\r\n\r\n  /**\r\n   * Attempts to connect to a Bluetooth device and subscribe to\r\n   * battery level readings using the battery service.\r\n   */\r\n  const connectToDeviceAndSubscribeToUpdates = async () => {\r\n    try {\r\n      // Search for Bluetooth devices that advertise a battery service\r\n      const device = await navigator.bluetooth\r\n        .requestDevice({\r\n          filters: [{services: ['battery_service']}]\r\n        });\r\n\r\n      setIsDisconnected(false);\r\n\r\n      // Add an event listener to detect when a device disconnects\r\n      device.addEventListener('gattserverdisconnected', onDisconnected);\r\n\r\n      // Try to connect to the remote GATT Server running on the Bluetooth device\r\n      const server = await device.gatt.connect();\r\n\r\n      // Get the battery service from the Bluetooth device\r\n      const service = await server.getPrimaryService('battery_service');\r\n\r\n      // Get the battery level characteristic from the Bluetooth device\r\n      const characteristic = await service.getCharacteristic('battery_level');\r\n\r\n      // Subscribe to battery level notifications\r\n      characteristic.startNotifications();\r\n\r\n      // When the battery level changes, call a function\r\n      characteristic.addEventListener('characteristicvaluechanged',\r\n                                  handleCharacteristicValueChanged);\r\n      \r\n      // Read the battery level value\r\n      const reading = await characteristic.readValue();\r\n\r\n      // Show the initial reading on the web page\r\n      setBatteryLevel(reading.getUint8(0) + '%');\r\n    } catch(error) {\r\n      console.log(`There was an error: ${error}`);\r\n    }\r\n  };\r\n    return(\r\n      <div>\r\n        <Menu/>\r\n        <h1>Testimonial Page</h1>\r\n        <h1>Get Device Battery Info Over Bluetooth</h1>\r\n      {supportsBluetooth && !isDisconnected &&\r\n            <p>Battery level: {batteryLevel}</p>\r\n      }\r\n      {supportsBluetooth && isDisconnected &&\r\n        <button onClick={connectToDeviceAndSubscribeToUpdates}>Connect to a Bluetooth device</button>\r\n      }\r\n      {!supportsBluetooth &&\r\n        <p>This browser doesn't support the Web Bluetooth API</p>\r\n      }\r\n        <br/>\r\n        <br/>\r\n        <iframe width=\"420\" height=\"315\"\r\nsrc=\"https://www.youtube.com/embed/tgbNymZ7vqY?controls=0\">\r\n</iframe>\r\n        <video controls width=\"250\" autoPlay>\r\n\r\n    <source src=\"https://www.youtube.com/watch?v=Dp6lbdoprZ0\"\r\n            type=\"video/webm\"/>\r\n\r\n    <source src=\"https://www.youtube.com/watch?v=Dp6lbdoprZ0\"\r\n            type=\"video/mp4\"/>\r\n\r\n    Sorry, your browser doesn't support embedded videos.\r\n</video>\r\n\r\n      </div>\r\n    );\r\n  }\r\n\r\n  export default Testimonial"]},"metadata":{},"sourceType":"module"}