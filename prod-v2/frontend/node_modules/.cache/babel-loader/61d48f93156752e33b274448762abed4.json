{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ayush.singh\\\\Desktop\\\\MERN\\\\prod-v2\\\\frontend\\\\src\\\\components\\\\Testimonial.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Menu } from './Home.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Testimonial = () => {\n  _s();\n\n  const [supportsBluetooth, setSupportsBluetooth] = useState(false);\n  const [isDisconnected, setIsDisconnected] = useState(true);\n  const [batteryLevel, setBatteryLevel] = useState(null); // When the component mounts, check that the browser supports Bluetooth\n\n  useEffect(() => {\n    if (navigator.bluetooth) {\n      setSupportsBluetooth(true);\n    }\n  }, []);\n  /**\r\n   * Let the user know when their device has been disconnected.\r\n   */\n\n  const onDisconnected = event => {\n    alert(`The device ${event.target} is disconnected`);\n    setIsDisconnected(true);\n  };\n  /**\r\n   * Update the value shown on the web page when a notification is\r\n   * received.\r\n   */\n\n\n  const handleCharacteristicValueChanged = event => {\n    setBatteryLevel(event.target.value.getUint8(0) + '%');\n  };\n  /**\r\n   * Attempts to connect to a Bluetooth device and subscribe to\r\n   * battery level readings using the battery service.\r\n   */\n\n\n  const connectToDeviceAndSubscribeToUpdates = async () => {\n    try {\n      // Search for Bluetooth devices that advertise a battery service\n      const device = await navigator.bluetooth.requestDevice({\n        acceptAllDevices: true,\n        optionalServices: ['0000180f-0000-1000-8000-00805f9b34fb']\n      });\n      console.log(device.name);\n      console.log(device.uiid);\n      setIsDisconnected(false); // Add an event listener to detect when a device disconnects\n\n      device.addEventListener('gattserverdisconnected', onDisconnected); // Try to connect to the remote GATT Server running on the Bluetooth device\n\n      const server = await device.gatt.connect(); // Get the battery service from the Bluetooth device\n\n      const service = await server.getPrimaryService('battery_service'); // Get the battery level characteristic from the Bluetooth device\n\n      const characteristic = await service.getCharacteristic('battery_level'); // Subscribe to battery level notifications\n\n      characteristic.startNotifications(); // When the battery level changes, call a function\n\n      characteristic.addEventListener('characteristicvaluechanged', handleCharacteristicValueChanged); // Read the battery level value\n\n      const reading = await characteristic.readValue(); // Show the initial reading on the web page\n\n      setBatteryLevel(reading.getUint8(0) + '%');\n    } catch (error) {\n      console.log(`There was an error: ${error}`);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Menu, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Testimonial Page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Get Device Battery Info Over Bluetooth\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }, this), supportsBluetooth && !isDisconnected && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Battery level: \", batteryLevel]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this), supportsBluetooth && isDisconnected && /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: connectToDeviceAndSubscribeToUpdates,\n      children: \"Connect to a Bluetooth device\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }, this), !supportsBluetooth && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"This browser doesn't support the Web Bluetooth API\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"iframe\", {\n      width: \"420\",\n      height: \"315\",\n      src: \"https://www.youtube.com/embed/tgbNymZ7vqY?controls=0\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 7\n  }, this);\n};\n\n_s(Testimonial, \"eIOKgkxn9KXnbe8KpbzW3gBoKh0=\");\n\n_c = Testimonial;\nexport default Testimonial;\n\nvar _c;\n\n$RefreshReg$(_c, \"Testimonial\");","map":{"version":3,"sources":["C:/Users/ayush.singh/Desktop/MERN/prod-v2/frontend/src/components/Testimonial.js"],"names":["React","useState","useEffect","Menu","Testimonial","supportsBluetooth","setSupportsBluetooth","isDisconnected","setIsDisconnected","batteryLevel","setBatteryLevel","navigator","bluetooth","onDisconnected","event","alert","target","handleCharacteristicValueChanged","value","getUint8","connectToDeviceAndSubscribeToUpdates","device","requestDevice","acceptAllDevices","optionalServices","console","log","name","uiid","addEventListener","server","gatt","connect","service","getPrimaryService","characteristic","getCharacteristic","startNotifications","reading","readValue","error"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA4BC,SAA5B,QAA4C,OAA5C;AACA,SAASC,IAAT,QAAqB,WAArB;;;AAEA,MAAMC,WAAW,GAAG,MAAM;AAAA;;AACxB,QAAM,CAACC,iBAAD,EAAoBC,oBAApB,IAA4CL,QAAQ,CAAC,KAAD,CAA1D;AACA,QAAM,CAACM,cAAD,EAAiBC,iBAAjB,IAAsCP,QAAQ,CAAC,IAAD,CAApD;AACA,QAAM,CAACQ,YAAD,EAAeC,eAAf,IAAkCT,QAAQ,CAAC,IAAD,CAAhD,CAHwB,CAKxB;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIS,SAAS,CAACC,SAAd,EAAyB;AACvBN,MAAAA,oBAAoB,CAAC,IAAD,CAApB;AACD;AACF,GAJQ,EAIN,EAJM,CAAT;AAMA;AACF;AACA;;AACE,QAAMO,cAAc,GAAIC,KAAD,IAAW;AAChCC,IAAAA,KAAK,CAAE,cAAaD,KAAK,CAACE,MAAO,kBAA5B,CAAL;AACAR,IAAAA,iBAAiB,CAAC,IAAD,CAAjB;AACD,GAHD;AAKA;AACF;AACA;AACA;;;AACE,QAAMS,gCAAgC,GAAIH,KAAD,IAAW;AAClDJ,IAAAA,eAAe,CAACI,KAAK,CAACE,MAAN,CAAaE,KAAb,CAAmBC,QAAnB,CAA4B,CAA5B,IAAiC,GAAlC,CAAf;AACD,GAFD;AAIA;AACF;AACA;AACA;;;AACE,QAAMC,oCAAoC,GAAG,YAAY;AACvD,QAAI;AACF;AACA,YAAMC,MAAM,GAAG,MAAMV,SAAS,CAACC,SAAV,CAClBU,aADkB,CACJ;AACbC,QAAAA,gBAAgB,EAAE,IADL;AAErBC,QAAAA,gBAAgB,EAAE,CAAC,sCAAD;AAFG,OADI,CAArB;AAMEC,MAAAA,OAAO,CAACC,GAAR,CAAYL,MAAM,CAACM,IAAnB;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAYL,MAAM,CAACO,IAAnB;AAEFpB,MAAAA,iBAAiB,CAAC,KAAD,CAAjB,CAXE,CAaF;;AACAa,MAAAA,MAAM,CAACQ,gBAAP,CAAwB,wBAAxB,EAAkDhB,cAAlD,EAdE,CAgBF;;AACA,YAAMiB,MAAM,GAAG,MAAMT,MAAM,CAACU,IAAP,CAAYC,OAAZ,EAArB,CAjBE,CAmBF;;AACA,YAAMC,OAAO,GAAG,MAAMH,MAAM,CAACI,iBAAP,CAAyB,iBAAzB,CAAtB,CApBE,CAsBF;;AACA,YAAMC,cAAc,GAAG,MAAMF,OAAO,CAACG,iBAAR,CAA0B,eAA1B,CAA7B,CAvBE,CAyBF;;AACAD,MAAAA,cAAc,CAACE,kBAAf,GA1BE,CA4BF;;AACAF,MAAAA,cAAc,CAACN,gBAAf,CAAgC,4BAAhC,EAC4BZ,gCAD5B,EA7BE,CAgCF;;AACA,YAAMqB,OAAO,GAAG,MAAMH,cAAc,CAACI,SAAf,EAAtB,CAjCE,CAmCF;;AACA7B,MAAAA,eAAe,CAAC4B,OAAO,CAACnB,QAAR,CAAiB,CAAjB,IAAsB,GAAvB,CAAf;AACD,KArCD,CAqCE,OAAMqB,KAAN,EAAa;AACbf,MAAAA,OAAO,CAACC,GAAR,CAAa,uBAAsBc,KAAM,EAAzC;AACD;AACF,GAzCD;;AA0CE,sBACE;AAAA,4BACE,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHF,EAICnC,iBAAiB,IAAI,CAACE,cAAtB,iBACK;AAAA,oCAAmBE,YAAnB;AAAA;AAAA;AAAA;AAAA;AAAA,YALN,EAOCJ,iBAAiB,IAAIE,cAArB,iBACC;AAAQ,MAAA,OAAO,EAAEa,oCAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YARF,EAUC,CAACf,iBAAD,iBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAXF,eAaE;AAAA;AAAA;AAAA;AAAA,YAbF,eAcE;AAAA;AAAA;AAAA;AAAA,YAdF,eAeE;AAAQ,MAAA,KAAK,EAAC,KAAd;AAAoB,MAAA,MAAM,EAAC,KAA3B;AACR,MAAA,GAAG,EAAC;AADI;AAAA;AAAA;AAAA;AAAA,YAfF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAsBD,CAhGH;;GAAMD,W;;KAAAA,W;AAkGJ,eAAeA,WAAf","sourcesContent":["import React, { useState ,  useEffect} from \"react\";\r\nimport { Menu } from './Home.js';\r\n\r\nconst Testimonial = () => {\r\n  const [supportsBluetooth, setSupportsBluetooth] = useState(false);\r\n  const [isDisconnected, setIsDisconnected] = useState(true);\r\n  const [batteryLevel, setBatteryLevel] = useState(null);\r\n\r\n  // When the component mounts, check that the browser supports Bluetooth\r\n  useEffect(() => {\r\n    if (navigator.bluetooth) {\r\n      setSupportsBluetooth(true);\r\n    }\r\n  }, []);\r\n\r\n  /**\r\n   * Let the user know when their device has been disconnected.\r\n   */\r\n  const onDisconnected = (event) => {\r\n    alert(`The device ${event.target} is disconnected`);\r\n    setIsDisconnected(true);\r\n  }\r\n\r\n  /**\r\n   * Update the value shown on the web page when a notification is\r\n   * received.\r\n   */\r\n  const handleCharacteristicValueChanged = (event) => {\r\n    setBatteryLevel(event.target.value.getUint8(0) + '%');\r\n  }\r\n\r\n  /**\r\n   * Attempts to connect to a Bluetooth device and subscribe to\r\n   * battery level readings using the battery service.\r\n   */\r\n  const connectToDeviceAndSubscribeToUpdates = async () => {\r\n    try {\r\n      // Search for Bluetooth devices that advertise a battery service\r\n      const device = await navigator.bluetooth\r\n        .requestDevice({\r\n          acceptAllDevices: true,\r\n  optionalServices: ['0000180f-0000-1000-8000-00805f9b34fb']\r\n        });\r\n\r\n        console.log(device.name);\r\n        console.log(device.uiid);\r\n\r\n      setIsDisconnected(false);\r\n\r\n      // Add an event listener to detect when a device disconnects\r\n      device.addEventListener('gattserverdisconnected', onDisconnected);\r\n\r\n      // Try to connect to the remote GATT Server running on the Bluetooth device\r\n      const server = await device.gatt.connect();\r\n\r\n      // Get the battery service from the Bluetooth device\r\n      const service = await server.getPrimaryService('battery_service');\r\n\r\n      // Get the battery level characteristic from the Bluetooth device\r\n      const characteristic = await service.getCharacteristic('battery_level');\r\n\r\n      // Subscribe to battery level notifications\r\n      characteristic.startNotifications();\r\n\r\n      // When the battery level changes, call a function\r\n      characteristic.addEventListener('characteristicvaluechanged',\r\n                                  handleCharacteristicValueChanged);\r\n      \r\n      // Read the battery level value\r\n      const reading = await characteristic.readValue();\r\n\r\n      // Show the initial reading on the web page\r\n      setBatteryLevel(reading.getUint8(0) + '%');\r\n    } catch(error) {\r\n      console.log(`There was an error: ${error}`);\r\n    }\r\n  };\r\n    return(\r\n      <div>\r\n        <Menu/>\r\n        <h1>Testimonial Page</h1>\r\n        <h1>Get Device Battery Info Over Bluetooth</h1>\r\n      {supportsBluetooth && !isDisconnected &&\r\n            <p>Battery level: {batteryLevel}</p>\r\n      }\r\n      {supportsBluetooth && isDisconnected &&\r\n        <button onClick={connectToDeviceAndSubscribeToUpdates}>Connect to a Bluetooth device</button>\r\n      }\r\n      {!supportsBluetooth &&\r\n        <p>This browser doesn't support the Web Bluetooth API</p>\r\n      }\r\n        <br/>\r\n        <br/>\r\n        <iframe width=\"420\" height=\"315\"\r\nsrc=\"https://www.youtube.com/embed/tgbNymZ7vqY?controls=0\">\r\n</iframe>\r\n\r\n      </div>\r\n    );\r\n  }\r\n\r\n  export default Testimonial"]},"metadata":{},"sourceType":"module"}